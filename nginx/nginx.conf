worker_processes 1;

# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 512; 
  accept_mutex off; 
  # set to 'on' if nginx worker_processes > 1
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


  log_format custom_cache_log '[$time_local] [Cache:$upstream_cache_status] [$host] [Remote_Addr: $remote_addr] - $remote_user - $server_name to: $upstream_addr: "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" ' ;
                    
  access_log /var/log/nginx/access.log combined;
  # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    # gzip_static on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;




  upstream app_server {
    server python:8000 fail_timeout=0;
  }

  upstream websocket { 
    # enable sticky session based on IP
    ip_hash;
    server python:8000;
  }

  server {
    listen [::]:80 default_server ipv6only=off;
    server_name garteroboter.li pren.garteroboter.li;
    return 301 https://$host$request_uri;
}
 


  server {
    listen 443 ssl;
    
    ssl_certificate      /etc/ssl/certificate.crt; 
    ssl_certificate_key  /etc/ssl/private.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
	
	

    server_name pren.garteroboter.li;
    root /var/www/public;

    client_max_body_size 4G;
    # This allows to check cache hits / misses
    add_header X-GG-Cache-Status $upstream_cache_status;


    

    location / {
	
	 # don't use cache
      #   add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0';
      #  if_modified_since off;
      #  expires off;
      #  etag off;

      # checks for static file, if not found proxy to app
       try_files $uri @proxy_to_app;
    }
	
	# Serve the images directly
    #location /static/img {
    #    autoindex on;
    #    alias /var/www/public/static/img;
    #}
    
    #location ~ \.(webp|jpg|png|ico)$ {
    #    root /var/www/public/static/img;
    #}
    
	## All static files will be served directly.
	# Source: https://stackoverflow.com/questions/19515132/nginx-cache-static-files
# location ~* ^.+\.(?:css|cur|js|jpe?g|gif|htc|ico|png|html|xml|otf|ttf|eot|woff|woff2|svg)$ {
 #   access_log off;
 #   expires 30d;
 #   add_header Cache-Control public;

    ## No need to bleed constant updates. Send the all shebang in one
    ## fell swoop.
 #   tcp_nodelay off;

    ## Set the OS file cache.
 #   open_file_cache max=3000 inactive=120s;
 #   open_file_cache_valid 45s;
 #   open_file_cache_min_uses 2;
 #   open_file_cache_errors off;
#}

    location @proxy_to_app {
    	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      	proxy_set_header X-Forwarded-Proto $scheme;
    	# proxy_set_header Host $http_host; # this is I think, not correct. gunicorn docs are unclear
    	proxy_redirect off;
    	proxy_buffering off;

    	proxy_pass http://app_server;
    }

    location /ws {

   	proxy_pass http://websocket/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;   

    }


   location /apk {
	proxy_pass http://app_server/apk;
	
	}

	location /websocketTest {
		proxy_pass http://app_server/websocketTest;

	}

    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /path/to/app/current/public;
    }
    
    # This 404 stuff like in blog
    error_page 404 /404.html;
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
  }



}

